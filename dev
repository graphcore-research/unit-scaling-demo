#!/usr/bin/env python3
"""Dev task launcher for scmm."""

import argparse
import subprocess
import sys
from pathlib import Path
from typing import Any, Callable, Iterable, Optional, TypeVar

# Utilities


def run(command: Iterable[Any]) -> None:
    """Run a command, terminating on failure."""
    cmd = [str(arg) for arg in command if arg is not None]
    print("$ " + " ".join(cmd), file=sys.stderr)
    exit_code = subprocess.call(cmd)
    if exit_code:
        sys.exit(exit_code)


T = TypeVar("T")


def cli(*args: Any, **kwargs: Any) -> Callable[[T], T]:
    """Declare a CLI command / arguments for that command."""

    def wrap(func: T) -> T:
        if not hasattr(func, "cli_args"):
            setattr(func, "cli_args", [])
        if args or kwargs:
            getattr(func, "cli_args").append((args, kwargs))
        return func

    return wrap


# Commands

SOURCE = [Path("scmm"), Path("dev"), Path("run_experiment.py")]


def _sources(core: bool, script: bool, tests: bool) -> Iterable[Path]:
    """Find all sources of the given type."""
    for root in SOURCE:
        if root.is_file() and script:
            yield root
        if root.is_dir():
            for child in root.glob("**/*.py"):
                is_test = "tests" in child.parts
                if (is_test and tests) or (not is_test and core):
                    yield child


PYLINT_TEST_DISABLE = [
    "missing-module-docstring",
    "missing-function-docstring",
    "missing-class-docstring",
    "redefined-outer-name",
    "unused-argument",
    "blacklisted-name",
]


@cli("-c", "--check", dest="no_format", action="store_true")
def format(no_format: bool) -> None:  # pylint: disable=redefined-builtin
    """run autoformatters (e.g. black)"""
    run(["isort", "--check" if no_format else None, *SOURCE])
    run(["black", "--check" if no_format else None, *SOURCE])


@cli()
def types() -> None:
    """run mypy to check types"""
    run(["mypy", "--strict", *_sources(core=True, script=True, tests=False)])
    run(
        [
            "mypy",
            "--cache-dir=.mypy_cache_tests",
            *_sources(core=False, script=False, tests=True),
        ]
    )


@cli()
def lint() -> None:
    """run code linting (static checks)"""
    run(["flake8", *SOURCE])
    run(["pylint", "-j 16", *_sources(core=True, script=True, tests=False)])
    run(
        [
            "pylint",
            "-j 16",
            *_sources(core=False, script=False, tests=True),
            f"--disable={','.join(PYLINT_TEST_DISABLE)}",
        ]
    )


@cli("-k", "--only", help="only run tests matching")
@cli("-s", dest="capture", action="store_false", help="suppress capture")
def test(only: Optional[str], capture: bool) -> None:
    """run unit tests"""
    run(
        [
            "pytest",
            "scmm",
            None if only else "--cov=scmm",
            None if capture else "--capture=no",
            f"-k {only}" if only else None,
        ]
    )


@cli("--no-format", action="store_true", help="don't run the formatter")
def check(no_format: bool) -> None:
    """run all checks and optionally autoformat the code"""
    test(only=None, capture=True)
    format(no_format=no_format)
    types()
    lint()


# Script


def _main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.set_defaults(action=lambda: check(no_format=False))

    subs = parser.add_subparsers()
    for key, value in globals().items():
        if hasattr(value, "cli_args"):
            sub = subs.add_parser(key.replace("_", "-"), help=value.__doc__)
            for args, kwargs in value.cli_args:
                sub.add_argument(*args, **kwargs)
            sub.set_defaults(action=value)

    cli_args = vars(parser.parse_args())
    action = cli_args.pop("action")
    action(**cli_args)


if __name__ == "__main__":
    _main()
